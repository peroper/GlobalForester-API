# coding: utf-8

"""
    Global Forester API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'name': 'str',
        'comment': 'str',
        'geometry': 'LineString1',
        'geometry_last_changed': 'datetime',
        'created': 'datetime',
        'updated': 'datetime',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'name': 'name',
        'comment': 'comment',
        'geometry': 'geometry',
        'geometry_last_changed': 'geometryLastChanged',
        'created': 'created',
        'updated': 'updated',
        'links': 'links'
    }

    def __init__(self, id=None, project_id=None, name=None, comment=None, geometry=None, geometry_last_changed=None, created=None, updated=None, links=None):  # noqa: E501
        """GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._name = None
        self._comment = None
        self._geometry = None
        self._geometry_last_changed = None
        self._created = None
        self._updated = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if geometry is not None:
            self.geometry = geometry
        if geometry_last_changed is not None:
            self.geometry_last_changed = geometry_last_changed
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param id: The id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The project_id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param project_id: The project_id of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The name of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param name: The name of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The comment of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param comment: The comment of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def geometry(self):
        """Gets the geometry of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The geometry of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: LineString1
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param geometry: The geometry of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: LineString1
        """

        self._geometry = geometry

    @property
    def geometry_last_changed(self):
        """Gets the geometry_last_changed of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The geometry_last_changed of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: datetime
        """
        return self._geometry_last_changed

    @geometry_last_changed.setter
    def geometry_last_changed(self, geometry_last_changed):
        """Sets the geometry_last_changed of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param geometry_last_changed: The geometry_last_changed of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: datetime
        """

        self._geometry_last_changed = geometry_last_changed

    @property
    def created(self):
        """Gets the created of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The created of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param created: The created of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The updated of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param updated: The updated of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def links(self):
        """Gets the links of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501


        :return: The links of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.


        :param links: The links of this GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalForesterApiV1ControllersTracklogsSharedResponseTracklog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
